PostgreSQL- developer-NOTES

Introduction of PostgreSQL--
    Introduced in 1996 aslo knwn as Postgres
    it is an Object relation database managment system ORDBMS
    lightweight and open source & support multiple OS support
    support Large and Complex database's & support Critical applications.
FEATURES OF POSTGRESQL--
    support various datatypes
    an open sources so low maintenance cost
    support a wide variety of Native library Interfaces
    also support obect-oriented features like inheritance/abstractions
    Extensible- 
    multi-vesion concurrency control (MVCC)

Default postgreSQL sever number is 5432

Features of Postgres--

  Use of PostgreSQL for very large datasets.
  Support for multiple operating systems including Windows, Linux, MacOS, Solaris and others.
  Reduced cost of maintenance because of its stability.
  Provides native library interfaces so it can easily be integrated with popular programming languages such as C/C++, Java, DotNet, Perl and Python.
  Supports various data types to represent numeric values, strings, date types and BLOBs(Binary Large Objects) such as audio, video and images.
  Can be used to implement object-oriented features such as inheritance, polymorphism and so on which other relational databases do not have.
  It is extensible thereby allowing users to create their own user-defined datatypes (UDTs).
  Support for Multi-Version Concurrency Control (MVCC) mechanism in order to manage consistency with concurrent access provided to various users.
 

HOW TO INSTALL POSTGRESQL & USE OF PGADMIN4 TOOL
IMPLEMETATION OF QUERIES

RDBMS CONCEPT!!! PREREQUISITIES:

PostgreSQL is a very powerful, Open Source (ORDBMS). With more than 20 years of active development 
and a proven architecture, IT has been known for its reliability, data integrity
and correctness. It is highly scalable and can be used to manage 
several terabytes of data. 

In production environments, Active PostgreSQL systems can be used to 
accommodate number of concurrent users due to a policy it follows
wherein writes never block reads and vice-versa. 
This is achieved through Multi Version Concurrency Control (MVCC)
mechanism that makes PostgreSQL different from other related databases. \

-INTRODUCTION TO DDL STATEMENT--

>CREATE DATABASE DATABASE_NAME
    eg: CREATE DATABASE BrandBucket;

  CREATE-CREATE THE TABLES OR VIEW SEQUENCE INDEX OTHER DATABASE OBJECTS
  ALTER- CHANGE THE STRUCTURE OF THE TABLE LIKE ADDING NEW COLUMN OR DROPPING IT SO ON
  DROP-REMOVE THE DATABASE OBJECT FROM THE D

CREATE TABLE: 
---------------------------------------------
CREATE TABLE table_name
(col_name datatype [column constraint],
 [table_constraint table constraint]
)[INHERITS (existing_table_name)];
---------------------------------------------
Syntax enclosed in a [ ] bracket is optional. Also, the INHERITS clause
is used to create a new table by reusing the structure of an existing table

PostgreSQL supports the following datatypes:

1.Boolean : T/F or null -- When there is no value assigned to a column, it is represented as null.
2.Character type: String values
    Text datatype: used to store characters of unlimited length
3.Numeric type: Integer-it store whole number 4byte
                Numeric-to store floating point number 
                Serial-auto incrementing integer
4.Temporal type-to store time based data.
               a. Timestamp[p] with time zone - both date and time with zone
               b. Date - Date(no time of day)
               c. time[(p)] with time zone - time of day only, with time zone
               d. interval[fields][(p)] - 12bytes
5.Array type
-----------------------------------------------
CONSTRAINTS: to ensure only valid values are stored into the table for a given 
              column

PostgreSQL supports these constraints:
NOTNULL, UNIQUE, PRIMARYKEY, DEFAULT, CHECK & FOREIGN KEY

  a.NOTNULL- does not allow null value to be inserted,
              can be applied as a column level constraint
  b.UNIQUE- does not allow duplicate values into the column eg email id
  c.PRIMARY KEY- combination of not null & unique
                  we can have only one primary key in a table eg: empid
  d.DEFAULT-  can be assigned default value using the DEFAULT option.
             eg:the hire date of the employee is treated as the current date 
                while storing details in the employee table if no value is
                provided explicitly.
  e.CHECK- check condition before inserting or updating data for a givn column
          eg: need to check the sarlary of evey employee is within a particul
              range of values.
  d.Foreign key: A table can have multiple foreign key constraints.

CREATE TABLE

CREATE TABLE departments
( department_id NUMERIC PRIMARY KEY,
  department_name VARCHAR(20));

CREATE TABLE employees
 ( employee_id NUMERIC PRIMARY KEY,  #
   first_name VARCHAR(20) NOT NULL,  #ensure not be empty
   last_name VARCHAR(20) NOT NULL,
   email_id VARCHAR(20) UNIQUE, #unique emailid
   phonenumber VARCHAR(20), 
   hire_date DATE DEFAULT CURRENT_DATE, # if no value is set for hiredate it is et to current date by default
   job_id VARCHAR(20),
   salary NUMERIC CHECK (salary > 0 ),  #check sal is greater than zero
   manager_id NUMERIC REFERENCES employees, # #managerid is a foreignkey that refer to employeeid of the sametable
   ON DELETE SET NULL ON UPDATE SET NULL, #If an employee_id which is referred in the manager_id column is removed or updated then the corresponding manager_id will be set to null.
   commission_pct numeric(2,2)
);

CREATE TABLE job_history
( employee_id NUMERIC,
  start_date DATE,
  end_date DATE,
  job_id VARCHAR(20),
  department_id NUMERIC REFERENCES departments 
  ON DELETE SET NULL ON UPDATE SET NULL,
  CONSTRAINT emp_date PRIMARY KEY (employee_id,start_date),
  CONSTRAINT empid_fk foreign key (employee_id) references employees 
  ON DELETE SET NULL ON UPDATE SET NULL,
  CONSTRAINT job_hist_date CHECK (start_date < end_date)
);
-------------------------------------------------------
COMMIT:
  used to save the changes made to data in the tables. commit the transcation 
while we are processing it to avoid warnings.

In Postgres, none of the SQL commands are auto-comitted
(unless the autocommit option is set to ON) in contrast to other 
databases where DDL commands do not need to commit explicitly.

In Postgres, after every SQL command, a COMMIT should be issued even 
if it is a DDL or any DML command.

ROLLBACK:
 To undo the transction that are not committed or saved.
will abort all the ongoing transactions
-------------------------------------------------------------------
ALTER:
  We can add, remove or make any changs to the columns in the table
  syntax : ALTER TABLE table_name <alter_action>;
note: modifying constraint is not possible with alter command.

ADDING A NEW COLUMN:
        ALTER TABLE employees
        ADD department_id NUMERIC REFERENCES departments 
        ON DELETE SET NULL ON UPDATE SET NULL;

DROPING THE COLUMN:
        syntax: ALTER TABLE table_name DROP COLUMN column_name;
        eg: ALTER TABLE employees DROP COLUMN commission_pct;

RENAMING THE COLUMN:
        syntax: ALTER TABLE table_name 
                RENAME COLUMN column_name TO new_column_name;

CHANGING/DROPING THE COLUMN'S DATATYPE:
        ALTER TABLE table_name ALTER COLUMN [SET NOT NULL| DROP NOT NULL];
eg: To add a NOT NULL constraint to a column
      >ALTER TABLE employees ALTER COLUMN department_id SET NOT NULL;
  To remove a NOT NULL constraint from a column
     > ALTER TABLE employees ALTER COLUMN department_id DROP NOT NULL;

ASSIGNING/DROPOING THE DEFAULT VALUE:

ALTER TABLE table_name ALTER COLUMN [SET DEFAULT value | DROP DEFAULT];

EG: 1.To set a default value for a column:
    >ALTER TABLE employees ALTER COLUMN department_id SET DEFAULT 1;
    2.To remove the default value from a column:\
    >ALTER TABLE employees ALTER COLUMN department_id DROP DEFAULT;

ADding a constraint:
      ALTER TABLE table_name 
      ADD CONSTRAINT constraint_name constraint_definition;

eg: ALTER TABLE employees ADD CONSTRAINT 
    employees_salary_check CHECK (salary > 0);

Renaming a table:
      ALTER TABLE table_name RENAME TO new_table_name;
-------------------------------------------------------------------
DROP COMMAND: to remove an exisiting table form the database.

syntax: DROP TABLE [IF EXISTS]  table_name [CASCADE| RESTRICT];

CASCADE: hint remove the dependency 
If the table you are trying to drop is having any foreign key
constraints referenced by child tables, then CASCADE option removes
all the other dependent objects automatically.

RESTRICT: This option refuses to drop the objects if there are
any dependent objects on it. When nothing is specified, by default
RESTRICT is used

eg: DROP TABLE IF EXISTS job_titles;

--------------INTRODUCTION TO DML STATMENTS------------------

DATA MANIPULATION LANGURAGE : TO INSERT, UPDATE(MODIFY) OR DELETE DATA ALREADY
INSERTED INTO THE TABLE.
1.INSERT: postgree allows to insert multiple records at a time.
2.UPDATE: to modify existing data in the table
3.DELETE: delete existing records from the table

INSERT: 
INSERT INTO departments (department_id, department_name) 
            VALUES(10,'Administration');
 
INSERT INTO departments 
(department_id, department_name) VALUES(10,'Administration');
-without specifying columnnames
INSERT INTO employees 
  VALUES(100,'Steven','King','SKING@gmail.com','515.123.4567','06/17/2023','Administration',26400,null,null,10);

Adding multiple records: {rounded braces, separated by comma}

INSERT INTO job_history 
values
(101, '2017-09-09', '2022-04-14', 'HR', 11), 
(102, '2016-06-05', '2021-08-09', 'Admin', 10);

--Postgree alos support inserting values from another table 

  INSERT INTO tablename(value1,value2,...)
SELECT column1,column2,...
FROM another_table
WHERE condition;

eg: INSERT INTO employees(employee_id, name, department_id)
SELECT employee_id, name, department_id
FROM new_employees
WHERE hire_date > '2023-01-01';

----UPDATE COMMAND--- 
to manipulate existing data in a table
set keyword is used to update statment

  UPDATE table_name
  SET column1 = value1, column2 = value2
  [WHERE condition];
  
  eg: UPDATE employees
  SET salary = salary + (salary * 0.1)
  WHERE department_id = 30;

DELETE command--------------
  to remove all the recordsor specific records from a table
  syntax: DELETE FROM table_name [WHERE condition];
  eg:   DELETE FROM employees
        WHERE employee_id = 717746;
----------------------------------------------
  RETRIEVE DATA USING SELECT STATEMENT: 

a.SELECT statement:

SELECT: SELECT * from employees;
SELECT employee_id, first_name, email_id, salary FROM employees;

Select statement can be used with the following clauses:
DISTINCT
WHERE  clause
ORDER BY clause
Operators like BETWEEN, IN and LIKE
GROUP BY  clause
HAVING clause
INNER JOIN, LEFT JOIN, FULL OUTER JOIN, CROSS JOIN clauses
--------------------------------------------------
a. DISTINCT operator:
eg:
SELECT DISTINCT department_id FROM employees;

b.DISTINCT ON:

SELECT statement fetch the records in random order so 
PostgreSQL supports DISTINCT ON (expression)
to fetch the first row from every group of duplicates.

eg:
SELECT DISTINCT ON (department_id) 
department_id, employee_id, first_name, last_name, job_id FROM employees;

The SELECT statement retrieves data in random order.
Hence to retrieve the exact records,
we shall use the ORDER BY clause along with the SELECT statement

ORDER BY CLAUSE:
  if no order is specified in order by clase the postgres sort the data in 
  ascending order by default

SYNTAX: 
SELECT column1,column2
FROM table_name
ORDER BY column1,column2 ASC/DESC;

eg:
    SELECT employee_id, first_name, salary
    FROM employees
    ORDER BY salary desc;                 

implementing ORDER BY Clause
eg2:
  SELECT department_id, first_name, salary
  FROM employees
  ORDER BY department_id ASC, salary DESC;

eg3; SELECT * FROM employee LIMIT 3 OFFSET 2;
  PICKUP 3 RECORDS STARTING FROM 2ND POSITION.

WHERE CLAUSE: filter the fetch data from the table

Syntax:
    SELECT column1, column2,...
    FROM table_name
    WHERE condition;

Postgree supports opertions:
mathematical Operation
AND, OR, IN| NOT IN, BETWEEN, LIKE- for pattern matching.
PostgreSQL also supports few operators
1.IS NULL | IS NOT NULL
2.LIMIT
3.OFFSET 

EG: select salary FROM employees
    limit 1 offset 2 order by salar desc - this willl display 3rd highest salar 

Functions:
String function--
a.String concatenation  eg: SELECT 'Post||grSQL'
b.Char_length(String)   eg: SELECT char_length('jose');
c.Position(substr in string) eg:SELECT position('om' in thomas) #3

Number Function--
> SELECT |/(25) - squre root of the give number
> SEELCT power(9,3) - return a^b , power(a,b)
> SELECT mod(25,5) - returns 0 the remainder after dividing y/x 

DATE FUNCTION--
syntax: now        eg: SELECT now()
    justify_days(interval)  egz: SELECT justify_days(interval '35 days')  output 1month 5 dyas
    Extract(field from source)    eg:select extract(year from hire_date) from employees   output: 1 years

SELECT first_name,salary, hire_date 
FROM employees
WHERE EXTRACT (YEAR FROM hire_date) = 2003;

GROUP BY CLAUSE:

SELECT department_id, job_id, sum(salary)
FROM employees
GROUP BY department_id,job_id;

HAVING CLAUSE:
 to filter the values based on the condition. 
having clause is used for grouping
this works with GROUP_BY statement.

eg:
SELECT count(employee_id), department_id
FROM employees
GROUP BY department_id
HAVING count(employee_id) > 3;

Difference between the WHERE and HAVING clause
---------------
HAVING CLAUSE 
    will work on the grouped data values generated after
    implementing the GROUP BY clause.
WHERE clause 
    will perform the filter operation based on the condition 
    for individual rows before GROUP BY clause.

SELECT count(employee_id), department_id
FROM employees
GROUP BY department_id
HAVING count(employee_id) > 3;
-----------

SELECT column1, aggregate(column2) 
FROM table_name
WHERE condition
GROUP BY columnname
HAVING condition;

EG:
SELECT department_id, count(employee_id) 
FROM employees 
WHERE department_id > 10
GROUP BY department_id 
HAVING count(employee_id) < 3;

GROUPING SET:
GROUPING SET works with the single or multiple fields
given in the GROUP BY clause

eg:

SELECT department_id, job_id, COUNT(employee_id)
FROM employees
GROUP BY GROUPING SETS (department_id, job_id);

ROLL UP:
PostgreSQL also supports ROLLUP to calculate subtotals on
grouped values as well as the grand total of all the values
in the column. Extra column will be added to the table to display
the subtotal and the grand total

SELECT column1, column2, aggregate_function(column)
FROM table_name
GROUP BY ROLLUP(column1,column2);

CUBE: 

ROLLUP is used to calculate the grand total and subtotal of 
the first column specified. In addition to that CUBE calculates
the grand total and subtotal for all the column values specified.

SELECT department_id, job_id,count(employee_id)
FROM employees
GROUP BY CUBE(department_id, job_id);

introduction to set operators-------
 set operators which works on multiple queries and 
provide the single output.
UNION-        ALL distinct/unique recrods/rows  from the table ,selected by either query
UNION ALL-    All rows selected by either query, icluding all duplicates
INTERSECT-    all distince row selected by both queries
EXCEPT-       all distinct row that are selected by the first select statment
                are not selected in the second SELECT statmenet.
--------------------------

A.UNION: TO FETCH THE UNIQUE RECORD FROM THE TABLE
& combine data from tables
SYNTAX:
SELECT column1, column2, .... FROM table1
UNION
SELECT column1, column2, .... FROM table2;

EG:
SELECT employee_id,job_id FROM employees 
UNION
SELECT employee_id,job_id FROM job_history;

B.INTERSECT: TO FETCH THE COMMON VALUES FROM BOTH THE TABLES SPECIFIED
 SYNTAX: 

SELECT column1, column2, .... FROM table1
INTERSECT
SELECT column1, column2, .... FROM table2;

EG:
SELECT employee_id,job_id FROM employees
INTERSECT 
SELECT employee_id,job_id FROM job_history;

EXCEPT:
to find the difference among the tables also called difference operator
compare two tables and fetch unique values from the 1st table avoid the common
values and the unique value of 2nd table

Synatx:
SELECT column1, column2, .... FROM table1
EXCEPT
SELECT column1, column2, .... FROM table2; 

eg:
this wil retrieved the employeeid and job if available from employe teble
but not availbrl in job_historytable
SELECT employee_id, job_id FROM employees
EXCEPT
SELECT employee_id, job_id FROM job_history;
--------------------------------------------------------
introduction to joins--

a.INNER JOIN - COMMON VALUE FROM BOTH THE TABLES BASED ON CONDITION
SYNTAX:
SELECT column1, column2..
FROM table_name1 t1  [INNER] JOIN table_name2 t2
ON t1.columnname = t2.columnname;

EG: 
SELECT first_name, department_name, e.department_id
FROM employees e JOIN departments d
ON e.department_id = d.department_id;
-------------
OUTER JOIN:
LEFT OUTER JOIN - FETCH  common data from both the table along with left table
RIGHT OUTER JOIN - Fetch commn data from both the table along with right table
FULL OUTER JOIN- all the values from both the table will be fetched

syntax:
SELECT column1, column2, ...
FROM table_name1 t1  LEFT OUTER JOIN table_name2 t2
ON t1.column_name = t2.column_name;
eg:
SELECT first_name,department_name, e.department_id 
FROM departments d LEFT OUTER JOIN employees e
ON e.department_id = d.department_id;
------------------
SELF JOIN: TO RETRIEVE DATA FROM SAME TABLE
           SELF JOIN IS USED WITH IN INNER JOIN & OUTER JOIN
            SELF JOIN USES UNARY RELATIONSHIP
SYNTAX:
SELECT t1.column_name, t2.column_name ...
FROM table_name1 t1 JOIN table_name t2
ON t1.column_name = t2.column_name;

EG:
SELECT e.first_name as "EmployeeNames", m.first_name as "ManagerNames"
FROM employees e JOIN employees m
ON e.manager_id = m.employee_id;

CROSS JOIN: USED TO RETURN ALL THE RECORDS FROM BOTH THE TABLES 
            CARTESIAN PRODUCT OF THE RECORDS PERSENT IN BOTH THE
            TABLES
If both the table has 10 records available in each, then we get 10 X 10 = 100 
100 records in the result.

sYNTAX:
SELECT col_name, col_name1
FROM table_name1 CROSS JOIN table_name2;
EG:
SELECT  ProductName, SubProductName, (Cost + Amount) as TotalCost
FROM product CROSS JOIN subproduct;

INTRODUCATION TO SUB QUERIES::

Embedding two or more queries together is known as a subquery.

SYNTAX:
    SELECT column1, column2, ......  FROM table_name
    WHERE EXPR_OPERATOR ( SELECT column1,.. FROM table_ name);

SUB QUEIRES  TYPESARE 
    CORRELATED - depends on other query 
    NON CORELATED  - THAT works independently

single row subquery:
    if the inner query return only one records

eg:
    SELECT first_name FROM employees WHERE manager_id = 
    (SELECT manager_id FROM employees WHERE first_name = 'Maria');

multiple row subquery;
    if an inner qury return more than one record then we call it as multiple row
    subquery.
    (in any all)

eg:
    SELECT first_name, salary FROM employees
    WHERE salary < ALL 
    (SELECT salary FROM employees WHERE job_id = 'Administration');

Correlated subqueries:
THE INNER QUERY DEPENDS UP ON THE COLUMN OF THE OUTER QUERY
EG:
    SELECT first_name,salary FROM employees e1
    WHERE salary = 
    (SELECT max(salary) FROM employees e2
    WHERE e2.department_id = e1.department_id);                          


EXIT OPERATOR: reurn boolean values depending upon the no of records returned
                by the inner query
The EXISTS operator will test if the record is available or not in a query
EG:
SELECT first_name FROM employees e1
WHERE EXISTS 
(SELECT 'X' FROM employees e2 WHERE e2.manager_id = e1.employee_id);   

NOT EXISTS
The NOT EXISTS operator is a negation to the EXISTS operator.
If the inner query returns zero records then this operator returns TRUE
else it returns FALSE

EG:
SELECT department_names FROM departments d1
WHERE NOT EXISTS 
(SELECT 'X' FROM employees e1 WHERE e1.department_id = d1.department_id);

INTRODUCTION TO DATABASE OBJECTS:
1.VIEW: A LOGICAL SUBSE OF A GIVEN TABLE
    create view can improve query respose time
    view are virtual table that are complied at run time
    views could be looked as an additional layeron a table which
    enable us to protect intricate sensitive data based upon our needs

SYNTAX:
    CREATE OR REPLACE VIEW  view_name
    AS subquery;
    WITH CHECK OPTION;

with check option: is used to restrict the modification to simple view 
through where cluase

eg:
CREATE OR REPLACE VIEW emp_view
AS
SELECT employee_id, first_name,department_id FROM employees
WHERE department_id = 10 WITH CHECK OPTION;
OUTPUT:
CREATE VIEW
QUERY RETURNED SUCCESSFULLY IN 243 MSEC.

INDEX:
which is used for random access.
Rather than doing a sequential search on a table
can be created on multiple columns
unique index is created on the columns having unique or primary key constrainst

eg:
CREATE INDEX indx1
ON employees(first_name);

SEQUENCES:

WHICH GENERATE UNIQUE INTEGER VALUES AUTOMATICALLY. IT WORKS WITH PRIMARY KEY
COLUMN IN THE TABLE

THE CYCLE CLAUSE IS SPECIFY THAT THE OBJECT should restart from the minimum
value when its maximum value is exceeded.

------------------
pg_hba: host-based authenctication file is used for client authenctication
pg_indnt is used for mapping
Postgresql.conf file is used to store the configuration values/option
postmaster.pid store information related to server process


Tools & utilities::

query tree- output of rewritter in query processing.
pg_basebackup- is used for file system backup.
pg_ctl - utility that can be used to initialise an new database cluster
dtemplate0 - efault database which is unmodifiable
\dt - meta command you will use to list table in postgreSQL

client application/utlities:


--------------PostgreSQL admininstration essetntials_-----

intitalizing PGDATA:

 database clustoer- a single direcoty under which all data 
                        will be stored
initdb - intializ data direcot for a datbase clustoer
        and instruct postmaster to startup using that data clustoer

pg_controldata[datadire] display control informationof a postgresql database
                            clustor

Starting and Stopping PostgreSQL:

pg_ctl application:
 to be run by the used who runs the application backend 
can be used to start,stop,restart or check on the status of  postgreSQL
--------------------------------
Sys V-style script
    run by the root user
    strting,stopping and status checking of postgresql
     known to work with most Red Hat based versions of Linux.
using sys v-style script instead of manually invoking pg_ctl is advantageous
it simplifies system starup and shutdown procedure
-------------------------------
System Architecture:
processs per used - client server model
every user conssist of :
    postmaster- a supervisor daemon proces
    use front end applcation eg psql prgm
    onr or more backend database servers (the postgres process itself)
------------------------------
the client process
         two parts: client application & client interface library
        prostgre comes prepacked with CLI called " psql "

client interface library
        is the way that eaach of those applicaion
        can talk to postgres server & convert sql querie 
------------------

PostgreSQL clients:
use inteerface
command line driven --psql  : installed by default
            syntax to install: psql dbname usedname
graphical alternative --pgAccess

---------
server processes
1. postmaster
    a thread run constaly
    all calls to db
    when it receive a call from client it creates a backend process
once the process is created it link the postgres client and postgres process
so that they are no longer have to communicate through the postmaster

postgreSQL instance: consist of set of process & memory
    process: uuse backend process
    memory: buffer
---------------
configuration files
default copy is installed when db cluster dirctory is instaleld
a.show config_file: will locate config file
b.prostgresql.config: loads the config variable 
c.pg_hba.config: host based access file
d.pg_ident.config: os used mappig file

a.initdb - intilaz the db directory
b.pg_ctl - controlling the db server mainly starting & stopping
c.postmaster - db server itslef
d.pg_hba.config - host based authentication configuration
psql - sql command line client

----------------
connections:

local- unix, domain socket
host - tcp/ip both ssl or no ssl
hostssl - only ssl
hostnossl - server ssl
------------

Authentication:
trust
reject
md5: require client to supply an md5 encrypted pwd for authenti
peer: 
ident:ident server obtain the os user name of the client
--------------

Login to postgresql:
peer authenctication:  a local connection
                    client os user name from kernal and used it as db name
                    for mapping
password authencation: are md5 pwd, pwd is sent across the connecions
namely md5 hased and clear test 
-----------------
creating a database:
postgresql install 2 defalut template db template0 and template1
a new db is cloned form on of these templates
2 methods for creating a new db
the CREATE DATABASE SQL COMMAND
CREAETEDB COMMAND LIND EXECUTABLE
-----------
removing a database:
the DROP DATABASE SQL COMMAND
THE dropdb command line executable
---------------------
maintenaing a dtabse
physical maintenance
analytical maintenance- to incre perfromacne
database object documentation
to add to the maintainability and clarity of the schema

VACCUM SQL COMMAND for maintenanve 
postgresql offer COMMENT allow documentaion of any db object

till pag no 40


                    


















