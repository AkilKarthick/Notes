java 8 ALL Stream Opertaion
filer, map, flatmap, sorted, limit, skip, peek & disntinct

1.what is filter Operation?

to process the elements of a stream and return only those that meed a
specified condtion

public class filterStringExample{
  public static void main(String[] args){
    //list of strings
    List<String> names = Arrays.asList("alice","bob","charlie","done");
    List<String> namesGreatethan3 = names.stream()
                                          .filter(s->s.lenth()>3)
                                          .collect(Collectors.toList());
  System.out.println(namesGreatethan3);
  }

2. we have an employee class

class Employee{
  String name;
  int age;
//constructor & to stringmethod
}
public class EmployeeFilterExample{
  public static void main(String[] args){
    List<Employee> employess = Arrays.asList(
        new Employee("alice",11),
        new Employee("ak",141)
        new Employee("adsf",2)
    );

//filter employee older than 30
List<Employee> empllist=employess.stream().filter(emp->emp.age >10).
collect(Collectors.toList());
System.out.println(empllist);
  }
}
}
-------------
MAP Operation: 
To Transform each elements in a Stream into another object or value.



public class MapIntergerExample{
  public static void main(String[] args){
    List<Integer> numbers = Arrays.asList(1,2,3,4,5);
    //multiple each number by 2 using map
     List<Integer> s1=  numbers.stream()
                                .map(s->s*2).collect(Collectors.toList)
      System.out.println(s1);
  }
}

2.extract employee name?

class Employee{
  String name;
  int age;
//constructor & to stringmethod
}
public class EmployeeExample{
  public static void main(String[] args){
    List<Employee> employess = Arrays.asList(
        new Employee("alice",11),
        new Employee("ak",141)
        new Employee("adsf",2)
    );
//extract name of the employee using map
employess.stream().map(emp->emp.name)
          .collect(Collectors.toList).forEach(System.out.println)

----------------
flatMap Operation:
is java 8 is used to flatten a stream of collections int0 a single stream.
it is particulary useful when dealing with nested collections

pgm1: flatten the list of fruits?

          public class FlattenFruitsExample{
            public static void main(String[] args){
                List<LIst<String>> fruits = Arrays.asList(
                    Arrays.asList("app","dev","qa"),
                    Arrays.asList("app1","dev2","qa1"),
                    Arrays.asList("app2","dev3","qa4"),
                );
                // flatten the list of lists into a single list of fruits
                  fruits.stream()
                        .flatMap(List::stream).collect(Collectors.toList())
          
          //or
          
                  fruits.stream()
                        .flatMap(list -> list.stream()).collect(Collectors.toList())
            }
          }

pgm2: find all the fruits names that start with A from list of list?

        public class FlattenFruitsExample{
          public static void main(String[] args){
                //list of lists of frutis
              List<List<String>> fruits = Arrays.asList(
                Arrays.asList("apple","orrange","banana"),
                Arrays.asList("grapes","ineapple","Mango"),
                Arrays.asList("peach","plum","aprict") 
              );
        //flatten the list of 
              List<String>  allFruits =fruits.stream().flatmap(List::stream).collect(Collectors.toList)
              System.out.println(allFruits);
        
        //flatten and filter fruits starTING WITH "a"
              List<String> fruits =fruits.stream()
                                          .flatmap(List::stream)
                                          .filter(s->s.startwith('A'))
                                          .collect(Collectors.toList());
            System.out.println("fruits starting with a" + fruits);
          }
        }
----------------
Sorted Operation:
the sorted() method in java 8 is a part of the stream API 
used to sort the elements.

pgm1: sort numbers in natural order(acsending)?

public class SortedExample{
  public static void main(String[] args){
      //list of integer
      List<Integer> numbers = Arrays.asList(3,6,4,7,4,7,2);
      List<Integer> sortedNo =numbers.stream()
                                     .sorted()
                                      .collect(Collectors.toList());
      System.out.println(sortedNo);//natural order
  }
}

2.Sort names in reverse order?

public class SortedExample{
  public static void main(String[] args){
      //list of integer
      List<String> names = Arrays.asList("akil","karthick","amma");
//sorted names in reverse order 
//for acceding order   : sorted((a,b)->a.compareTo(b))
//desceding order      : sorted((a,b)->b.compareTo(a))

     List<String> sortedList = names.stream()
                                    .sorted((a,b)->b.compareTo(a))
                                    .collect(Collectors.ToList());
      
      System.out.println(sortedList);//natural order
  }
}
---------------
Limit Operation: used to truncate a stream to contain atmost n elements
useful only when you want to process only a subset of a stream

pgm1: get the first 3 elements using limit:

public class LimitIntegerExample{
  public static void main(String[] args){
      List<Integer> numbers = Arrays.asList(10,20,30,40,50);
      //get the first 3 elements using limit
      List<Integer> threenumer = numbers.stream()
                                        .limit(3)
                                        .collect(Collectors.toList());
      System.out.println(threenumbers);
  }
}

Skip Operations:
to skip the first n elements of a stream and process the remaining elemts

pgm1: skip the first 3 elements
pgm2: filter even numbers and skip the first2

public class skipexample{
  public static void main(String[] args){
      List<Integer> numbers = Arrays.asList(1,4,6,7,8,4,6);
//skip the first 3 elements
      List<Integer> fewmber =numbers
                                .stream()
                                .skip(3)
                                .collect(Collectors.toList());
      System.out.println(fewmber);

//filter even number and skip the first2

List<Integer> fewmber =numbers.stream()
                              .filter(s->s%2==0)
                              .skip(3) 
                              .collect(Collectors.toList());
      System.out.println(fewmber);
  }
}
-----------------
Distinct Operation: filter out duplicate elements from a stream

pgm1: removing duplicate Strings
pgm2: remove duplicate person from list

public class distincteg{
  public static void main(String[] args){  
      List<String> dup = Arrays.asList("akil","akil","karthick");
      List<String> distinct =dup.stream().distinct().collect(Collectors.toList());
      System.out.pritln(distinct);
    }
}

pgm2:

class Employee{
  String name;
  int age;
//constructor & to stringmethod
}
public class EmployeeExample{
  public static void main(String[] args){
    List<Employee> employess = Arrays.asList(
        new Employee("alice",11),
        new Employee("karthick",31)
        new Employee("akil",11)
    );
List<Employee> uniqueemployee = employess.stream().distinct().collect(Collector.toList())
  System.out.println(uniqueemployee);
}
}
//to remove duplicate for a CUSTOM OBJECT 
you need to override
hashcode() and equal() method

------------------
peek() Operations:
for debugging or perfroming a non terminal operation on each elemens
as it flow through the stream

pgm1: debuggin the stream with peek

public class peakexample{
  public static void main(String[] args){
      List<Integer> numbers = Arrays.asList(1,4,6,7,8,4,6);
//debuggig the stream with peak

          List<Interger> mulitpliedby2=numbers.stream().peek(n->System.out.println("orgin"+n))
          .map(n->n*2).peak(n->System.out.println("after map "+n))
          .collect(Collector.toList());
System.out.println(mulitpliedby2);
----
output:
orginal 1
after map 2
orginal 4
after map 8-
...


  
