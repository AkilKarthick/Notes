1. using java 8 return a list containing only even numbers from a list of integers
2. find the maximum value in a list of integer
3. sort a list of integer, ascending order?
4. count the element in a list that are greater than 5
5. retrieve all distinct element from a list
6. skip the first 2 element of a list and return the rest
7. convert a list of integers to a Set to remove duplicate
8. group elements by a specific property such as age
9. reduce a list of Integer to theri sum
10. convert all string in a list to uppercase
------------------------------------
//occurence of each word
List<String> stringsss = Arrays.asList("apple","apple","banana","cherry");
Map<String,Long> s=stringsss.stream()
                            .collect(Collectors.groupingBy(e->e, Collectors.counting()));

using java 8 return a list containing only even numbers from a list of integers

List<Integer> numbers = Arrays.asList(1,2,3,4,5,6,7,8);
numbers.stream().filter(num->num/2==0).collect(Collectors.toList);

2. max & min ?

Optionl<Integer> MaxNumber = numbers.stream()
                                    .max(Comparator.naturalOrder());

Optional<Integer> MinNumber = numbers.stream()
                                    .min(Comparator.naturalOrder());

3. sort a list of String, ascending order?

List<String> words = Arrays.asList("lk","Akil","z","d");
LIst<String> sortedList = words.stream().sorted().collect(Collectors.toList());

4.5. retrieve all distinct element from a list

numbers02.stream().distinct().forEach(System.out::println));

5.skip frist 2 element 

numbers02.stream().skip(2).forEach(System.out::println);

7. convert alist of integer to set 
List<Integer> numbers = Arrays.asList(1,2,3,4,5,6,7,7);
Set<Integer> numberSetremoveDuplicate = new HashSet<>(numbers);

8.group elements by a specific property such as age

perople.stream().collect(Collectors.groupingBy(Person::getAge));

9.reduce a list of Integer to their sum?

or
number.stream().mapToInt(num->num).sum()

number.stream().reduce(0,Integer::sum).collect(Collectors.toList)

10.convertint to uppercae
List<String> uppercasedwords = words2.stream().map(s->s.toUpperCase()).collect(Collectors.toList());
---Array coding interview questions--
//find missing number in an array using stream API?
//boxed()- convert int to Integer.
int[] arr ={2,3,4,5};
List<Integer> list1 = Arrays.stream(arr).filter(i->i>0).sorted().distinct().boxed().collect(Collectors.toList());
int missingNumber = IntStream.rangeClosed(1, list.size()+1).filter(i->!list.contains(i)).findFirst().orElse(1);
System.out.println("missing number:" + missingNumber)

//find nth largest element from array using stream api//
public static void main(String[] args){
int[] arr ={4,7,3,9,13};
System.out.println(getNthlargestElement(arr,3));

private static int getNthlargestElement(int[] arr,int n){

 List<Integer> list = Arrays.stream(arr)
                            .boxed()
                            .sorted(Comparator.reverseOrder())
                            .collect(Collector.toList());
 return list.get(n-1);
}
}
//find duplicate element in array using stream api:

int[] arr = {2,3,5,7,8,5,3}
Map<Integer,Long> dupElements = Arrays.stream(arr)
                                      .boxed()
                                      .collect(Collectors.groupingBy(e->e,Collectors.counting()));
List<Integer> list = map.entrySet().stream().filter(e->e.getValue()>1).map(e->e.getKey()).collect(Collectors.toList());
list.forEach(e->System.out.println("duplicate element:" +e));

//find the largest/smallest element in array using stream api:
int[] arr = {1,4,7,8,5,10};
int minValue = Arrays.stream(arr).min().orElseThrow(()-> new IllegalArgumenentException("Empty array"));
System.out.println("Min val:"+minValue);
int maxValue = Arrays.stream(arr).max().orElseThrow(()->new ILlegalArgumentException("Empty array"));
System.out.println("Max val:"+maxValue);

int min = arr[0];
int max = arr[0];
for(int i=1;i<arr.length;i++){
  if(arr[i]>max){
    max = arr[i];
  }
  if(arr[i]<min){
    min = arr[i]
  }
}
System.out.println("MIN:"+min+"\t max vale:"+max);
//move all zero to end of array using stream api

int[] arr = {1,0,4,0,5,0};
int[] nonZeroElementArr = Arrays.stream(arr)
                                .filter(i->i>0).distinct().toArray();
long zeroCount = Arrays.stream(arr)
                        .filter(i->i==0)
                        .count();
int[] arr01 = IntStream.concat(Arrays.stream(nonZeroElementArr),Arrays.stream(new int[(int)ZeroCount])).toArray();
System.out.println(arr01);
//move all zero to end of Array using stream api.

//count the occurence of each character in string

String str = "occurence";
Map<Character,Long> s =str.chars()
                          .mapToObj(c->(char)c.collect(Collectors.groupingBy(Function.identity(), Collectors.counting())));
 characterCount.forEach((character, count) ->
s.forEach(System.out::println);
mapToObj return empty stream

//remove duplicate character from string

String dupString = "Occurence of Each string here";
dupString.chars().mapToObj(c->(char)c).collect(Collectors.toSet()).forEach(system.out::println);
//remove all duplicate character from string
dupString=

//find the third highest salary from list of employee

list<Employee> employees = Arrays.asList(
                new Employee("lk",25,40000,1),
new Employee("akil",25,50000,1),
new Employee("karthick",25,60000,1),
new Employee("kootyn",25,70000,2)
)

List<Department> department = Arrays.asList(
  new Department(1,"it"),
new Department(2,"Sales"),
new Department(3,"HR"),
)
//how to find employee with 3rd highest salary from list of employee?

Employe edetails = employees.stream()
                            .sorted(Comparator.comparingInt(Employee::getSalary)
                            .reversed()
                            .skip(2)
                            .findFirst()
                            .get();
//move all the zeros to the end of array and maitain

Arrays.stream(arr).













