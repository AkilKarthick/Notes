day3

enhanced for loop

also called as for-each loop 
simplified way to iterate over elements in array and collection without using an index
used when only the elements itself is needed, not the index or advanced logic

syntax:

for(datatype variable : arrayorCollection){
//code
}

eg

int[] num = {1,2,3,5};

for(int s: num) {
System.out.println(s);
}

ArrayList<String> names = new ArrayList<>();

names.add("akil");
names.add("akil");
names.add("akil");

for(String n:names){
System.out.println(n);
}

-----------------------------------------------------
interface & abstract class

abstract Class

Declared with abstract keyword, cannot create objects directly | Cannot instantiate abstract class
Can have both abstract methods (no body) and concrete methods (with body).
Can have any access modifiers (public, protected, private).
Can declare member variables â€” static, final, non-static, non-final.
Supports constructors.
Single inheritance: A class can extend only one abstract class.
Used for sharing common code/logic across related classes.


abstract class Shape {
    String name;
    Shape(String n) { name = n; }
    public void moveTo(int x, int y) {
        System.out.println(name + " moved to x = " + x + ", y = " + y);
    }
    abstract double area();
}

class Rectangle extends Shape {
    int length, width;
    Rectangle(int l, int w, String n) { super(n); length = l; width = w; }
    double area() { return length * width; }
}

--------------------------



interface

Declared with interface keyword
All methods are public and abstract by default; since Java 8, can have default and static methods with body
Variables must be public, static, and final
No constructors allowed in interfaces
Multiple inheritance: A class can implement many interfaces


interface EmployeeResponsibilities {
    void work();
    void displayInfo();
}



abstract class Employee implements EmployeeResponsibilities {
    String name;
    int id;

 Employee(String name, int id) {
        this.name = name;
        this.id = id;
    }


public void displayInfo() {
        System.out.println("Employee: " + name + ", ID: " + id);
    }


// Abstract method: to be implemented by subclasses
    abstract void calculateBonus();

-


class PermanentEmployee extends Employee {
    PermanentEmployee(String name, int id) {
        super(name, id);
    }

    public void work() {
        System.out.println(name + " is working full-time.");
    }

    void calculateBonus() {
        System.out.println("Permanent employee bonus: " + (id * 0.1));
    }
}

class ContractEmployee extends Employee {
    ContractEmployee(String name, int id) {
        super(name, id);
    }

    public void work() {
        System.out.println(name + " is working on a contract basis.");
    }

    void calculateBonus() {
        System.out.println("Contract employees do not get a bonus.");
    }
}