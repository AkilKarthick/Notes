Experienced java interview questions!

1. which version of java you are using?
java8

2.how to create thread safe singleton class in java using double checked locking?

a.volatile keyword ensures visibility of changes to variable acrsss thread
            private static volatile Singelton instance;
to ensure multiple thread handles the instance varible correctly
when it is beig initialized to the singleton instance.

b.private construcot to prevent instantitation

c.double checking locking
  1.first if(instance == null) performed without locking
  2.check inside synchronized block ensures that only one thread
  initialize the instance variable.

eg:

public class Singelton {
   private static volatile Singelton instance;
    public Singleton(){
    }
    public static Singelton getInstance() {
        if(instance == null){
          //first check no locking
        synchronized(Singelton.class){
          if(instance == null){
              instance = new Singleton();
          }
        }
        }
      return instance;
    }
}

when the varilable is marked as volatile, cjhanges made to the variable by 
one thread are immiediatly visible to other threads
volatile also ensures that the varlues of the variable is always fetced
from the main memory and not from the thread local cahce

3.why multiple inheritance is not supported in java?

root cause is diamond problem
when a class inherit form two class it create diamond provlem
lead to ambiguity , it got confused which method to use

eg: class A{
  void display(){
  }
    class B extends A{
    void display(){
    }
    class C extends A{
    void display(){}  
    }
  //if java allowed multiple inheritnace
  class D extends B,C{
    // which display() method should D inhertis??

so we go for interface 
class D implements classB, classC //
  }
    }
}

b.can you override static method in java?
      no static method cannot be overriden, we can hide the method
known as method hidding, cannot be overridden by hidden 

why java doesn't support operator overloading?

to avoid poetntail issue that can arise from it;s misuse and to 
maintain simplicity
??

why is String immutable in java?

a.String are used to store sensitive information like pws,username,urls
b.synchronization and consurrency: immutable objects are thread safe
their state canot be changed after creation, they can be shared
freely btwn threads without synchronization. this make String safe 
to use in muli thread environments
Stringppol to store string literals, 


eg:
public class Test{
            public static void main(String[] args){
            String str ="Hello";
            Runnable task = ()-> {System.out.println(str)};
Thread t1 = new Thread(task);
Thread t2 = new Trhead(task);
t.start();
t2.start();
            }
}
multiple thread can read the same string object simultanesouly without
any risk of data corruption or inconsisteny.
both Thread can safelly read the Str varilable
without any synchroniztion bcz String is immutale and threadsafe

8.what is String Tokenizer?

            a class that allows to break your string into tokens
            tokesn are smaller string or character that are separated by delimieters
            
            StringTokenizer str= new StringTokenizer("this is a demo");
            while(str.hasMoreTokens()){
                        System.out.println(str.nextToken());
            }
            
            we can use String.split() for an alternative 

9.what is String constant pool in java?
            a specil memory area within the heap that store string literals
            when a string literl is created jvm check the pool to see if an 
            idnetiacal string already exist or not . if it does the reference
            to the existing string is returned instrea of creating a new object
            
            eg
            String str1="Hello";
            String str2 = "Hello"; 
            These literals are automatically placed in the String constant pool
            
            String str3 = new String("Hello");
            are not stoed in pool by defulat bcz we are using new keyword
            str3 will reference a new object in the heap, not the pool.
            
            String str4 = new String("Hello").intern();
            can manually add strings to the pool using the intern() method


10. pgm to reverse a String?

String st1 = "Akil";
String reversedStrig= new StringBuilder(st1).reverse().toString();
System.out.println("reversedStrig");

11.different way to create a String objects?



