Database (JPA/Hibernate)

springboot integrate with databaez using jpa/hibernate for easy data access and management

entity class: represtnt table in your database
repositoroy class: handle crud operation,
	extends JPARepository<entiyclassname,Long>

so you can use methods like save, findAll, findById etc

Controller: Exposes REST endpoints to interact with entities
-------------------------------

entity class

@Entity
public class Customer{
}
@Id
@GeneratedValue(strategy = GenerationType.IDENTITY)
private Long Id;
private String name;
private String email;

//getterSetter

this class will be mapped to a table called customer in the databse automatically by JPA/Hibernate

b.Repository class

public interface CustomerRepository extends JPARepository<Customer, Long>{
}
this interface will provide all the basic CRUD operation save find update delte for the customer entity

Controller class
a RESTFUL intercations with database records

@RestController
@RequestMapping("/customers")
public class CustomerController {

    @Autowired
    private CustomerRepository customerRepository;

    @GetMapping
    public List<Customer> getAllCustomers() {
        return customerRepository.findAll();
    }

    @PostMapping
    public Customer createCustomer(@RequestBody Customer customer) {
        return customerRepository.save(customer);
    }
}

then, 

confiruation

application.properties

spring.datasource.url=jdbc:mysql://localhost:3306/testdb
spring.datasource.username=root
spring.datasource.password=mypassword
spring.jpa.hibernate.ddl-auto=update


these settings connect springboot to the MySQLdb AND  configure hibernate to update tables
automatically

how it works

when spring boot application start it create db table as per entity,
every api call like post get etc, interact with db via the repository JPA using hibernate
automatically translate java operation to Sql queries

-------------------------------------


Essential JPA/Hibernate Annotations


@Entity - marks a java class a JPA entity - mapped to database table

@Table - specifies the exact table name and options

@Id- denotes the primay key files of the entity

@GeneratedValue - configure automatic generation for primary key like autoincremet

@Column - ffine tune column mapping

@Transient - exclude a field from persitance, it wont be saved in the db

@Enumerated - persist Enums as a String or ordinal value

@Temporal - specifies data.time format for data files

@Lob - indicate large object types for big Strings or binary data

@Version - implement locking with version number for safef multi user updates


--------------

Relatkonship Mapping

@ManyToOne: eg many order for one customer
@OneToMany: one customer has many order
@OneToOne: user profile and user account
@ManyToMany: students enrolled in courses
@JoinColumn: customize foreign key column name in relationship


@NamedQuery/@Query = define custom JPQL queries inside entities or repository interface
@Embeddable/@Embedded =  used for reusable components like address fields shared by many entities
@MappedSuperClass =  fields are inherited form superclass but not stored as a physical table

----------------------------------------------------------------------------------

many to one

@Entity
public class Order {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String item;

    @ManyToOne
    @JoinColumn(name = "customer_id") // Foreign key column
    private Customer customer;
}


@Entity
public class Customer {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;
}
---------------

one to many

@Entity
public class Customer {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;

    @OneToMany(mappedBy = "customer")
    private List<Order> orders;
}

----------
one to one

@Entity
public class UserProfile {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String address;
    @OneToOne
    @JoinColumn(name = "user_account_id")
    private UserAccount userAccount;
}
@Entity
public class UserAccount {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String username;
}
-------

many to many

@Entity
public class Student {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String name;
    @ManyToMany
    @JoinTable(
        name = "student_courses",
        joinColumns = @JoinColumn(name = "student_id"),
        inverseJoinColumns = @JoinColumn(name = "course_id")
    )
    private Set<Course> courses;
}
@Entity
public class Course {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String name;
    @ManyToMany(mappedBy = "courses")
    private Set<Student> students;
}
-----------------------
JPQL:

public interface CustomerRepository extends JpaRepository<Customer, Long> {
    @Query("SELECT c FROM Customer c WHERE c.email = ?1")
    Customer findByEmail(String email);
}
--------------------

@Embeddable, @Embedded Example
Address fields reused:

@Embeddable
public class Address {
    private String street;
    private String city;
}
@Entity
public class Customer {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Embedded
    private Address address;
}
--------------------------

@MappedSuperclass


Superclass fields inherited, not a table



@MappedSuperclass
public abstract class AuditModel {
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
}
@Entity
public class Customer extends AuditModel {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String name;
}



